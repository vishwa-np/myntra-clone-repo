/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.onlineshopping.product.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import com.onlineshopping.product.service.model.ProductOrder;
import com.onlineshopping.product.service.model.ProductOrderModel;
import com.onlineshopping.product.service.model.ProductOrderSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProductOrder service. Represents a row in the &quot;Product_ProductOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProductOrderModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductOrderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProductOrderImpl
 * @generated
 */
@JSON(strict = true)
public class ProductOrderModelImpl
	extends BaseModelImpl<ProductOrder> implements ProductOrderModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a product order model instance should use the <code>ProductOrder</code> interface instead.
	 */
	public static final String TABLE_NAME = "Product_ProductOrder";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"productId", Types.BIGINT}, {"size_", Types.VARCHAR},
		{"quantity", Types.INTEGER}, {"cost", Types.BIGINT},
		{"userId", Types.BIGINT}, {"addressId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("size_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("cost", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Product_ProductOrder (uuid_ VARCHAR(75) null,id_ LONG not null primary key,productId LONG,size_ VARCHAR(75) null,quantity INTEGER,cost LONG,userId LONG,addressId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Product_ProductOrder";

	public static final String ORDER_BY_JPQL = " ORDER BY productOrder.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Product_ProductOrder.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.onlineshopping.product.service.model.ProductOrder"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.onlineshopping.product.service.model.ProductOrder"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.onlineshopping.product.service.model.ProductOrder"),
		true);

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProductOrder toModel(ProductOrderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProductOrder model = new ProductOrderImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setProductId(soapModel.getProductId());
		model.setSize(soapModel.getSize());
		model.setQuantity(soapModel.getQuantity());
		model.setCost(soapModel.getCost());
		model.setUserId(soapModel.getUserId());
		model.setAddressId(soapModel.getAddressId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProductOrder> toModels(ProductOrderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProductOrder> models = new ArrayList<ProductOrder>(
			soapModels.length);

		for (ProductOrderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"lock.expiration.time.com.onlineshopping.product.service.model.ProductOrder"));

	public ProductOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductOrder.class;
	}

	@Override
	public String getModelClassName() {
		return ProductOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProductOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProductOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductOrder, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProductOrder)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProductOrder, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProductOrder, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProductOrder)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProductOrder, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProductOrder, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProductOrder>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProductOrder.class.getClassLoader(), ProductOrder.class,
			ModelWrapper.class);

		try {
			Constructor<ProductOrder> constructor =
				(Constructor<ProductOrder>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ProductOrder, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProductOrder, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProductOrder, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ProductOrder, Object>>();
		Map<String, BiConsumer<ProductOrder, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProductOrder, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object uuidObject) {

					productOrder.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(ProductOrder productOrder, Object idObject) {
					productOrder.setId((Long)idObject);
				}

			});
		attributeGetterFunctions.put(
			"productId",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getProductId();
				}

			});
		attributeSetterBiConsumers.put(
			"productId",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object productIdObject) {

					productOrder.setProductId((Long)productIdObject);
				}

			});
		attributeGetterFunctions.put(
			"size",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getSize();
				}

			});
		attributeSetterBiConsumers.put(
			"size",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object sizeObject) {

					productOrder.setSize((String)sizeObject);
				}

			});
		attributeGetterFunctions.put(
			"quantity",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getQuantity();
				}

			});
		attributeSetterBiConsumers.put(
			"quantity",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object quantityObject) {

					productOrder.setQuantity((Integer)quantityObject);
				}

			});
		attributeGetterFunctions.put(
			"cost",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getCost();
				}

			});
		attributeSetterBiConsumers.put(
			"cost",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object costObject) {

					productOrder.setCost((Long)costObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object userIdObject) {

					productOrder.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"addressId",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getAddressId();
				}

			});
		attributeSetterBiConsumers.put(
			"addressId",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object addressIdObject) {

					productOrder.setAddressId((Long)addressIdObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object createDateObject) {

					productOrder.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<ProductOrder, Object>() {

				@Override
				public Object apply(ProductOrder productOrder) {
					return productOrder.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<ProductOrder, Object>() {

				@Override
				public void accept(
					ProductOrder productOrder, Object modifiedDateObject) {

					productOrder.setModifiedDate((Date)modifiedDateObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getProductId() {
		return _productId;
	}

	@Override
	public void setProductId(long productId) {
		_productId = productId;
	}

	@JSON
	@Override
	public String getSize() {
		if (_size == null) {
			return "";
		}
		else {
			return _size;
		}
	}

	@Override
	public void setSize(String size) {
		_size = size;
	}

	@JSON
	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@JSON
	@Override
	public long getCost() {
		return _cost;
	}

	@Override
	public void setCost(long cost) {
		_cost = cost;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(long addressId) {
		_addressId = addressId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ProductOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductOrder toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProductOrder>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductOrderImpl productOrderImpl = new ProductOrderImpl();

		productOrderImpl.setUuid(getUuid());
		productOrderImpl.setId(getId());
		productOrderImpl.setProductId(getProductId());
		productOrderImpl.setSize(getSize());
		productOrderImpl.setQuantity(getQuantity());
		productOrderImpl.setCost(getCost());
		productOrderImpl.setUserId(getUserId());
		productOrderImpl.setAddressId(getAddressId());
		productOrderImpl.setCreateDate(getCreateDate());
		productOrderImpl.setModifiedDate(getModifiedDate());

		productOrderImpl.resetOriginalValues();

		return productOrderImpl;
	}

	@Override
	public int compareTo(ProductOrder productOrder) {
		int value = 0;

		if (getId() < productOrder.getId()) {
			value = -1;
		}
		else if (getId() > productOrder.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProductOrder)) {
			return false;
		}

		ProductOrder productOrder = (ProductOrder)object;

		long primaryKey = productOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductOrder> toCacheModel() {
		ProductOrderCacheModel productOrderCacheModel =
			new ProductOrderCacheModel();

		productOrderCacheModel.uuid = getUuid();

		String uuid = productOrderCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			productOrderCacheModel.uuid = null;
		}

		productOrderCacheModel.id = getId();

		productOrderCacheModel.productId = getProductId();

		productOrderCacheModel.size = getSize();

		String size = productOrderCacheModel.size;

		if ((size != null) && (size.length() == 0)) {
			productOrderCacheModel.size = null;
		}

		productOrderCacheModel.quantity = getQuantity();

		productOrderCacheModel.cost = getCost();

		productOrderCacheModel.userId = getUserId();

		productOrderCacheModel.addressId = getAddressId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			productOrderCacheModel.createDate = createDate.getTime();
		}
		else {
			productOrderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			productOrderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			productOrderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return productOrderCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProductOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProductOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductOrder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ProductOrder)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ProductOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ProductOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProductOrder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ProductOrder)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProductOrder>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _productId;
	private String _size;
	private int _quantity;
	private long _cost;
	private long _userId;
	private long _addressId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private ProductOrder _escapedModel;

}