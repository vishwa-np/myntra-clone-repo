/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.onlineshopping.product.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import com.onlineshopping.product.service.model.Highlights;
import com.onlineshopping.product.service.model.HighlightsModel;
import com.onlineshopping.product.service.model.HighlightsSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Highlights service. Represents a row in the &quot;Product_Highlights&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HighlightsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HighlightsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HighlightsImpl
 * @generated
 */
@JSON(strict = true)
public class HighlightsModelImpl
	extends BaseModelImpl<Highlights> implements HighlightsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a highlights model instance should use the <code>Highlights</code> interface instead.
	 */
	public static final String TABLE_NAME = "Product_Highlights";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"features", Types.VARCHAR}, {"size_", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("features", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("size_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Product_Highlights (uuid_ VARCHAR(75) null,id_ LONG not null primary key,features VARCHAR(75) null,size_ VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Product_Highlights";

	public static final String ORDER_BY_JPQL = " ORDER BY highlights.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Product_Highlights.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.onlineshopping.product.service.model.Highlights"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.onlineshopping.product.service.model.Highlights"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.onlineshopping.product.service.model.Highlights"),
		true);

	public static final long FEATURES_COLUMN_BITMASK = 1L;

	public static final long SIZE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Highlights toModel(HighlightsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Highlights model = new HighlightsImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setFeatures(soapModel.getFeatures());
		model.setSize(soapModel.getSize());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Highlights> toModels(HighlightsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Highlights> models = new ArrayList<Highlights>(soapModels.length);

		for (HighlightsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"lock.expiration.time.com.onlineshopping.product.service.model.Highlights"));

	public HighlightsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Highlights.class;
	}

	@Override
	public String getModelClassName() {
		return Highlights.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Highlights, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Highlights, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Highlights, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Highlights)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Highlights, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Highlights, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Highlights)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Highlights, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Highlights, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Highlights>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Highlights.class.getClassLoader(), Highlights.class,
			ModelWrapper.class);

		try {
			Constructor<Highlights> constructor =
				(Constructor<Highlights>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Highlights, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Highlights, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Highlights, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Highlights, Object>>();
		Map<String, BiConsumer<Highlights, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Highlights, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Highlights, Object>() {

				@Override
				public Object apply(Highlights highlights) {
					return highlights.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Highlights, Object>() {

				@Override
				public void accept(Highlights highlights, Object uuidObject) {
					highlights.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<Highlights, Object>() {

				@Override
				public Object apply(Highlights highlights) {
					return highlights.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Highlights, Object>() {

				@Override
				public void accept(Highlights highlights, Object idObject) {
					highlights.setId((Long)idObject);
				}

			});
		attributeGetterFunctions.put(
			"features",
			new Function<Highlights, Object>() {

				@Override
				public Object apply(Highlights highlights) {
					return highlights.getFeatures();
				}

			});
		attributeSetterBiConsumers.put(
			"features",
			new BiConsumer<Highlights, Object>() {

				@Override
				public void accept(
					Highlights highlights, Object featuresObject) {

					highlights.setFeatures((String)featuresObject);
				}

			});
		attributeGetterFunctions.put(
			"size",
			new Function<Highlights, Object>() {

				@Override
				public Object apply(Highlights highlights) {
					return highlights.getSize();
				}

			});
		attributeSetterBiConsumers.put(
			"size",
			new BiConsumer<Highlights, Object>() {

				@Override
				public void accept(Highlights highlights, Object sizeObject) {
					highlights.setSize((String)sizeObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Highlights, Object>() {

				@Override
				public Object apply(Highlights highlights) {
					return highlights.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Highlights, Object>() {

				@Override
				public void accept(
					Highlights highlights, Object createDateObject) {

					highlights.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Highlights, Object>() {

				@Override
				public Object apply(Highlights highlights) {
					return highlights.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Highlights, Object>() {

				@Override
				public void accept(
					Highlights highlights, Object modifiedDateObject) {

					highlights.setModifiedDate((Date)modifiedDateObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getFeatures() {
		if (_features == null) {
			return "";
		}
		else {
			return _features;
		}
	}

	@Override
	public void setFeatures(String features) {
		_columnBitmask |= FEATURES_COLUMN_BITMASK;

		if (_originalFeatures == null) {
			_originalFeatures = _features;
		}

		_features = features;
	}

	public String getOriginalFeatures() {
		return GetterUtil.getString(_originalFeatures);
	}

	@JSON
	@Override
	public String getSize() {
		if (_size == null) {
			return "";
		}
		else {
			return _size;
		}
	}

	@Override
	public void setSize(String size) {
		_columnBitmask |= SIZE_COLUMN_BITMASK;

		if (_originalSize == null) {
			_originalSize = _size;
		}

		_size = size;
	}

	public String getOriginalSize() {
		return GetterUtil.getString(_originalSize);
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Highlights.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Highlights toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Highlights>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HighlightsImpl highlightsImpl = new HighlightsImpl();

		highlightsImpl.setUuid(getUuid());
		highlightsImpl.setId(getId());
		highlightsImpl.setFeatures(getFeatures());
		highlightsImpl.setSize(getSize());
		highlightsImpl.setCreateDate(getCreateDate());
		highlightsImpl.setModifiedDate(getModifiedDate());

		highlightsImpl.resetOriginalValues();

		return highlightsImpl;
	}

	@Override
	public int compareTo(Highlights highlights) {
		int value = 0;

		if (getId() < highlights.getId()) {
			value = -1;
		}
		else if (getId() > highlights.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Highlights)) {
			return false;
		}

		Highlights highlights = (Highlights)object;

		long primaryKey = highlights.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalFeatures = _features;

		_originalSize = _size;

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Highlights> toCacheModel() {
		HighlightsCacheModel highlightsCacheModel = new HighlightsCacheModel();

		highlightsCacheModel.uuid = getUuid();

		String uuid = highlightsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			highlightsCacheModel.uuid = null;
		}

		highlightsCacheModel.id = getId();

		highlightsCacheModel.features = getFeatures();

		String features = highlightsCacheModel.features;

		if ((features != null) && (features.length() == 0)) {
			highlightsCacheModel.features = null;
		}

		highlightsCacheModel.size = getSize();

		String size = highlightsCacheModel.size;

		if ((size != null) && (size.length() == 0)) {
			highlightsCacheModel.size = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			highlightsCacheModel.createDate = createDate.getTime();
		}
		else {
			highlightsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			highlightsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			highlightsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return highlightsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Highlights, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Highlights, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Highlights, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Highlights)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Highlights, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Highlights, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Highlights, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Highlights)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Highlights>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private String _features;
	private String _originalFeatures;
	private String _size;
	private String _originalSize;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Highlights _escapedModel;

}