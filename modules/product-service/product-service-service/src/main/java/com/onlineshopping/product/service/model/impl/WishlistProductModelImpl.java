/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.onlineshopping.product.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import com.onlineshopping.product.service.model.WishlistProduct;
import com.onlineshopping.product.service.model.WishlistProductModel;
import com.onlineshopping.product.service.model.WishlistProductSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the WishlistProduct service. Represents a row in the &quot;Product_WishlistProduct&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>WishlistProductModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WishlistProductImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WishlistProductImpl
 * @generated
 */
@JSON(strict = true)
public class WishlistProductModelImpl
	extends BaseModelImpl<WishlistProduct> implements WishlistProductModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wishlist product model instance should use the <code>WishlistProduct</code> interface instead.
	 */
	public static final String TABLE_NAME = "Product_WishlistProduct";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"wishlistId", Types.BIGINT},
		{"productId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("wishlistId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Product_WishlistProduct (id_ LONG not null primary key,wishlistId LONG,productId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table Product_WishlistProduct";

	public static final String ORDER_BY_JPQL =
		" ORDER BY wishlistProduct.wishlistId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Product_WishlistProduct.wishlistId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.onlineshopping.product.service.model.WishlistProduct"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.onlineshopping.product.service.model.WishlistProduct"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.onlineshopping.product.service.model.WishlistProduct"),
		true);

	public static final long PRODUCTID_COLUMN_BITMASK = 1L;

	public static final long WISHLISTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WishlistProduct toModel(WishlistProductSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WishlistProduct model = new WishlistProductImpl();

		model.setId(soapModel.getId());
		model.setWishlistId(soapModel.getWishlistId());
		model.setProductId(soapModel.getProductId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WishlistProduct> toModels(
		WishlistProductSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<WishlistProduct> models = new ArrayList<WishlistProduct>(
			soapModels.length);

		for (WishlistProductSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.onlineshopping.product.service.service.util.ServiceProps.get(
			"lock.expiration.time.com.onlineshopping.product.service.model.WishlistProduct"));

	public WishlistProductModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WishlistProduct.class;
	}

	@Override
	public String getModelClassName() {
		return WishlistProduct.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<WishlistProduct, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<WishlistProduct, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WishlistProduct, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((WishlistProduct)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<WishlistProduct, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<WishlistProduct, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(WishlistProduct)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<WishlistProduct, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<WishlistProduct, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, WishlistProduct>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			WishlistProduct.class.getClassLoader(), WishlistProduct.class,
			ModelWrapper.class);

		try {
			Constructor<WishlistProduct> constructor =
				(Constructor<WishlistProduct>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<WishlistProduct, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<WishlistProduct, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<WishlistProduct, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<WishlistProduct, Object>>();
		Map<String, BiConsumer<WishlistProduct, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<WishlistProduct, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<WishlistProduct, Object>() {

				@Override
				public Object apply(WishlistProduct wishlistProduct) {
					return wishlistProduct.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<WishlistProduct, Object>() {

				@Override
				public void accept(
					WishlistProduct wishlistProduct, Object idObject) {

					wishlistProduct.setId((Long)idObject);
				}

			});
		attributeGetterFunctions.put(
			"wishlistId",
			new Function<WishlistProduct, Object>() {

				@Override
				public Object apply(WishlistProduct wishlistProduct) {
					return wishlistProduct.getWishlistId();
				}

			});
		attributeSetterBiConsumers.put(
			"wishlistId",
			new BiConsumer<WishlistProduct, Object>() {

				@Override
				public void accept(
					WishlistProduct wishlistProduct, Object wishlistIdObject) {

					wishlistProduct.setWishlistId((Long)wishlistIdObject);
				}

			});
		attributeGetterFunctions.put(
			"productId",
			new Function<WishlistProduct, Object>() {

				@Override
				public Object apply(WishlistProduct wishlistProduct) {
					return wishlistProduct.getProductId();
				}

			});
		attributeSetterBiConsumers.put(
			"productId",
			new BiConsumer<WishlistProduct, Object>() {

				@Override
				public void accept(
					WishlistProduct wishlistProduct, Object productIdObject) {

					wishlistProduct.setProductId((Long)productIdObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<WishlistProduct, Object>() {

				@Override
				public Object apply(WishlistProduct wishlistProduct) {
					return wishlistProduct.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<WishlistProduct, Object>() {

				@Override
				public void accept(
					WishlistProduct wishlistProduct, Object createDateObject) {

					wishlistProduct.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<WishlistProduct, Object>() {

				@Override
				public Object apply(WishlistProduct wishlistProduct) {
					return wishlistProduct.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<WishlistProduct, Object>() {

				@Override
				public void accept(
					WishlistProduct wishlistProduct,
					Object modifiedDateObject) {

					wishlistProduct.setModifiedDate((Date)modifiedDateObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getWishlistId() {
		return _wishlistId;
	}

	@Override
	public void setWishlistId(long wishlistId) {
		_columnBitmask = -1L;

		if (!_setOriginalWishlistId) {
			_setOriginalWishlistId = true;

			_originalWishlistId = _wishlistId;
		}

		_wishlistId = wishlistId;
	}

	public long getOriginalWishlistId() {
		return _originalWishlistId;
	}

	@JSON
	@Override
	public long getProductId() {
		return _productId;
	}

	@Override
	public void setProductId(long productId) {
		_columnBitmask |= PRODUCTID_COLUMN_BITMASK;

		if (!_setOriginalProductId) {
			_setOriginalProductId = true;

			_originalProductId = _productId;
		}

		_productId = productId;
	}

	public long getOriginalProductId() {
		return _originalProductId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, WishlistProduct.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WishlistProduct toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, WishlistProduct>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WishlistProductImpl wishlistProductImpl = new WishlistProductImpl();

		wishlistProductImpl.setId(getId());
		wishlistProductImpl.setWishlistId(getWishlistId());
		wishlistProductImpl.setProductId(getProductId());
		wishlistProductImpl.setCreateDate(getCreateDate());
		wishlistProductImpl.setModifiedDate(getModifiedDate());

		wishlistProductImpl.resetOriginalValues();

		return wishlistProductImpl;
	}

	@Override
	public int compareTo(WishlistProduct wishlistProduct) {
		int value = 0;

		if (getWishlistId() < wishlistProduct.getWishlistId()) {
			value = -1;
		}
		else if (getWishlistId() > wishlistProduct.getWishlistId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof WishlistProduct)) {
			return false;
		}

		WishlistProduct wishlistProduct = (WishlistProduct)object;

		long primaryKey = wishlistProduct.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalWishlistId = _wishlistId;

		_setOriginalWishlistId = false;

		_originalProductId = _productId;

		_setOriginalProductId = false;

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<WishlistProduct> toCacheModel() {
		WishlistProductCacheModel wishlistProductCacheModel =
			new WishlistProductCacheModel();

		wishlistProductCacheModel.id = getId();

		wishlistProductCacheModel.wishlistId = getWishlistId();

		wishlistProductCacheModel.productId = getProductId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			wishlistProductCacheModel.createDate = createDate.getTime();
		}
		else {
			wishlistProductCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			wishlistProductCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			wishlistProductCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return wishlistProductCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<WishlistProduct, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<WishlistProduct, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WishlistProduct, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((WishlistProduct)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<WishlistProduct, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<WishlistProduct, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WishlistProduct, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((WishlistProduct)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, WishlistProduct>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private long _wishlistId;
	private long _originalWishlistId;
	private boolean _setOriginalWishlistId;
	private long _productId;
	private long _originalProductId;
	private boolean _setOriginalProductId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private WishlistProduct _escapedModel;

}